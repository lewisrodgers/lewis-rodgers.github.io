<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-12-16T11:33:03-05:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">lewisrodgers.com</title><subtitle>Google Cloud professional enabling organizations to leverage Google Cloud technologies  and drive business objectives.</subtitle><author><name>lewisrodgers</name></author><entry><title type="html">Downloading Cloud Storage bucket files in bulk</title><link href="http://localhost:4000/downloading-cloud-storage-bucket-files-in-bulk.html" rel="alternate" type="text/html" title="Downloading Cloud Storage bucket files in bulk" /><published>2019-09-12T00:00:00-04:00</published><updated>2019-09-12T00:00:00-04:00</updated><id>http://localhost:4000/downloading-cloud-storage-bucket-files-in-bulk</id><content type="html" xml:base="http://localhost:4000/downloading-cloud-storage-bucket-files-in-bulk.html">&lt;p&gt;The Cloud Console doesn’t have a “download all” feature that lets you download every file in a Cloud Storage bucket all in one go. So, you’re left with downloading each file individually. That’s tedious.&lt;/p&gt;

&lt;p&gt;But, there &lt;em&gt;is&lt;/em&gt; a way to do a bulk download,&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; and it’s with the gsutil tool.&lt;/p&gt;

&lt;p&gt;First thing you should do is install gsutil. But if you don’t want to—or can’t—then the Cloud Shell is your alternative (everything you need is installed here and ready to go).&lt;/p&gt;

&lt;p&gt;Ok, here’s the quick steps so you can get to work.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Attention!&lt;/strong&gt; Don’t omit the period at the end of &lt;code class=&quot;highlighter-rouge&quot;&gt;gsutil cp -r gs://my-bucket .&lt;/code&gt; (it’s part of the command).&lt;/p&gt;

&lt;h2 id=&quot;option-1-cloud-shell-with-gsutil&quot;&gt;Option 1: Cloud Shell with gsutil&lt;/h2&gt;

&lt;p&gt;Activate&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; Cloud Shell from the Cloud Console, then run these commands in the shell terminal:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkdir my_folder
cd my_folder
gsutil cp -r gs://my-bucket .
zip -r all_files.zip my_folder
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Download the &lt;code class=&quot;highlighter-rouge&quot;&gt;all_files.zip&lt;/code&gt; file to your local machine and unzip it like you normally would.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;/assets/posts/2019-09-12/download-file.png&quot; /&gt;
  &lt;figcaption&gt;The vertical dots context menu contains the option to download.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Wondering about the zip? Similar to the Cloud Console, Cloud Shell only allows downloading one file at a time. To get around this limitation, package up multiple files into a single zip file. Then, download just the zip.&lt;/p&gt;

&lt;h2 id=&quot;option-2-locally-with-gsutil&quot;&gt;Option 2: Locally with gsutil&lt;/h2&gt;

&lt;p&gt;Install and configure&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; gsutil for your operating system, then run these commands in the terminal:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkdir my_folder
cd my_folder
gsutil cp -r gs://my-bucket .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://cloud.google.com/storage/docs/downloading-objects&quot;&gt;“Downloading objects | Cloud Storage | Google Cloud.”&lt;/a&gt; Accessed 12 Sep. 2019. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://cloud.google.com/shell/docs/quickstart&quot;&gt;“Quickstart | Cloud Shell | Google Cloud.”&lt;/a&gt; 21 Aug. 2018. Accessed 12 Sep. 2019. &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://cloud.google.com/storage/docs/gsutil_install&quot;&gt;“Install gsutil | Cloud Storage | Google Cloud.”&lt;/a&gt; 16 Aug. 2019. Accessed 12 Sep. 2019. &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>lewisrodgers</name></author><category term="GCP" /><summary type="html">The Cloud Console doesn’t have a “download all” feature that lets you download every file in a Cloud Storage bucket all in one go. So, you’re left with downloading each file individually. That’s tedious.</summary></entry><entry><title type="html">Mapping a custom domain to your App Maker app</title><link href="http://localhost:4000/mapping-a-custom-domain-to-your-app-maker-app.html" rel="alternate" type="text/html" title="Mapping a custom domain to your App Maker app" /><published>2019-09-03T00:00:00-04:00</published><updated>2019-09-03T00:00:00-04:00</updated><id>http://localhost:4000/mapping-a-custom-domain-to-your-app-maker-app</id><content type="html" xml:base="http://localhost:4000/mapping-a-custom-domain-to-your-app-maker-app.html">&lt;p&gt;While it’s possible to map a friendlier URL to an App Maker deployment, it requires privileged access to your domain registrar or organization’s G Suite admin console. If you don’t have this level of clearance, then you’ll need to coordinate with your organization’s admins to do some of the things described below.&lt;/p&gt;

&lt;h2 id=&quot;subdomain-forwarding&quot;&gt;Subdomain forwarding&lt;/h2&gt;

&lt;p&gt;A unique URL is created when deploying an App Maker application and looks something like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://script.google.com/a/macros/company.com/s/AKfyc.../exec
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you manage a domain, a shorter and more readable URL can be configured with subdomain forwarding. The steps to do this depends on the domain registrar (e.g., Google Domains, Bluehost, etc.).&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;/assets/posts/2019-09-03/subdomain-forwarding.png&quot; /&gt;
  &lt;figcaption&gt;Domain forwarding in Google Domains.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;So imagine creating a catchy subdomain like &lt;code class=&quot;highlighter-rouge&quot;&gt;coolfinancecalculator.company.com&lt;/code&gt; and mapping it to your not-so-short App Maker app URL.&lt;/p&gt;

&lt;h2 id=&quot;g-suite-web-address-mapping&quot;&gt;G Suite web address mapping&lt;/h2&gt;

&lt;p&gt;As a G Suite administrator, you can assign (map) a URL to a site in Google Sites. Instead of the default sites.google.com/a/yourdomain.com/yoursitename, you can create shorter, easy-to-remember addresses for your public websites (like company.com/productname). You can create up to 2000 custom site addresses with your G Suite account.&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2019-09-03/add-a-new-web-address-mapping.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once you’ve created the Google Site, embed (or add a link to) the deployed App Maker application.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;/assets/posts/2019-09-03/embedded-app-maker.png&quot; /&gt;
  &lt;figcaption&gt;App Maker app embedded on a Google Site.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Think about using a Google Site as a landing page for multiple related App Maker applications. And maybe even store documentation on how to use these apps here, too.&lt;/p&gt;

&lt;h2 id=&quot;custom-deployment-url&quot;&gt;Custom deployment URL&lt;/h2&gt;

&lt;p&gt;There’s an &lt;a href=&quot;https://issuetracker.google.com/issues/63382989&quot; target=&quot;_blank&quot;&gt;open feature request&lt;/a&gt; in the Google issue tracker (opened in 2017) requesting the ability to customize the deployment URL to improve readability. This would be a nice alternative since any App Maker author could customize the deployment URL directly from the App Maker UI. But, it’s hard to say when, or if, this feature will become available.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://support.google.com/a/answer/7392423&quot; target=&quot;_blank&quot;&gt;https://support.google.com/a/answer/7392423&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>lewisrodgers</name></author><category term="G Suite" /><summary type="html">While it’s possible to map a friendlier URL to an App Maker deployment, it requires privileged access to your domain registrar or organization’s G Suite admin console. If you don’t have this level of clearance, then you’ll need to coordinate with your organization’s admins to do some of the things described below.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/posts/2019-09-03/featured.png" /></entry><entry><title type="html">Identifying user-managed and Google-managed service accounts</title><link href="http://localhost:4000/identifying-user-managed-vs-google-managed-service-accounts.html" rel="alternate" type="text/html" title="Identifying user-managed and Google-managed service accounts" /><published>2019-09-01T00:00:00-04:00</published><updated>2019-09-01T00:00:00-04:00</updated><id>http://localhost:4000/identifying-user-managed-vs-google-managed-service-accounts</id><content type="html" xml:base="http://localhost:4000/identifying-user-managed-vs-google-managed-service-accounts.html">&lt;p&gt;User-managed service accounts are identifiable by these email formats:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Service&lt;/th&gt;
      &lt;th&gt;Service account&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Compute Engine&lt;/td&gt;
      &lt;td&gt;PROJECT_NUMBER-compute@developer.gserviceaccount.com&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;App Engine&lt;/td&gt;
      &lt;td&gt;PROJECT_NUMBER@appspot.gserviceaccount.com&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;User defined&lt;/td&gt;
      &lt;td&gt;SERVICE_ACCOUNT_NAME@PROJECT_ID.iam.gserviceaccount.com&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Service accounts displayed in the &lt;strong&gt;Service Accounts&lt;/strong&gt; section of the Cloud Console are considered to be &lt;em&gt;user-managed&lt;/em&gt;. And, there’s a &lt;code class=&quot;highlighter-rouge&quot;&gt;gcloud&lt;/code&gt; command for listing these user-managed service accounts.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gcloud iam service-accounts list
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The only GCP services mentioned in the documentation—that generate user-managed service accounts automatically—are Compute Engine and App Engine&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. So I assume these are the only services that do this. All other service accounts, that aren’t explicitly created by &lt;em&gt;you&lt;/em&gt;, are Google-managed.&lt;/p&gt;

&lt;p&gt;A Google-managed service account is displayed in the &lt;strong&gt;IAM&lt;/strong&gt; section of the Cloud Console and are not displayed in the Service Accounts section. These are generated automatically when GCP services are enabled. For example, when you deploy a Cloud Function for the first time or enable an API from the &lt;strong&gt;API Library&lt;/strong&gt; section.&lt;/p&gt;

&lt;p&gt;You don’t use the gcloud command &lt;code class=&quot;highlighter-rouge&quot;&gt;gcloud iam service-accounts list&lt;/code&gt; to list Google-managed service accounts. To list Google-managed service accounts in your project, get the IAM policy instead.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gcloud projects get-iam-policy &lt;span class=&quot;nv&quot;&gt;$PROJECT_ID&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And with some flattening and filtering you can list just the service accounts.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gcloud projects get-iam-policy &lt;span class=&quot;nv&quot;&gt;$PROJECT_ID&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--flatten&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bindings[].members[]&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;table(bindings.members)&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bindings.members:serviceAccount&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;identifying-google-managed-service-accounts&quot;&gt;Identifying Google-managed service accounts&lt;/h2&gt;

&lt;p&gt;There are a few different ways to tell a service account is Google-managed: through email patterns, help text, and by checking the project’s IAM policy (the most straight forward and definitive method).&lt;/p&gt;

&lt;h3 id=&quot;email-patterns&quot;&gt;Email patterns&lt;/h3&gt;

&lt;p&gt;Most Google-managed service accounts follow this email pattern:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;service-PROJECT_NUMBER@SERVICE_NAME.iam.gserviceaccount.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here are some examples with this pattern:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Service&lt;/th&gt;
      &lt;th&gt;Service account&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Compute Engine&lt;/td&gt;
      &lt;td&gt;service-PROJECT_NUMBER@compute-system.iam.gserviceaccount.com&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Cloud Filestore&lt;/td&gt;
      &lt;td&gt;service-PROJECT_NUMBER@cloud-filer.iam.gserviceaccount.com&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Cloud AI Platform&lt;/td&gt;
      &lt;td&gt;service-PROJECT_NUMBER@cloud-ml.google.com.iam.gserviceaccount.com&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;But, this isn’t always the case:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Service&lt;/th&gt;
      &lt;th&gt;Service account&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Google APIs&lt;/td&gt;
      &lt;td&gt;PROJECT_NUMBER@cloudservices.gserviceaccount.com&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Cloud Build&lt;/td&gt;
      &lt;td&gt;PROJECT_NUMBER@cloudbuild.gserviceaccount.com&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Firebase&lt;/td&gt;
      &lt;td&gt;firebase-service-account@firebase-sa-management.iam.gserviceaccount.com&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;help-text&quot;&gt;Help text&lt;/h3&gt;

&lt;p&gt;Also, some service accounts have help text that tell us that a service account is Google-managed.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;/assets/posts/2019-09-01/help-text.png&quot; alt=&quot;Cloud Functions service account in IAM members list&quot; /&gt;
  &lt;figcaption&gt;Hovering over the question mark (?) explicitly tells us that the service account is Google-managed.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;And, like the email patterns, this isn’t always the case.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;/assets/posts/2019-09-01/no-help-text.png&quot; alt=&quot;Cloud Storage service account in IAM members list&quot; /&gt;
  &lt;figcaption&gt;No help text here.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&quot;iam-policy&quot;&gt;IAM policy&lt;/h3&gt;

&lt;p&gt;The email patterns and help text aren’t consistent, but the rule of thumb is: if the service account is listed in the project’s IAM policy and doesn’t show up in the Service Accounts section, then it’s Google-managed.&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lewisrodgers/google-managed-service-accounts&quot;&gt;List of GCP generated service accounts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://cloud.google.com/iam/docs/service-accounts#user-managed_service_accounts&quot; target=&quot;_blank&quot;&gt;https://cloud.google.com/iam/docs/service-accounts#user-managed_service_accounts&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>lewisrodgers</name></author><category term="GCP" /><summary type="html">User-managed service accounts are identifiable by these email formats:</summary></entry><entry><title type="html">Domain-wide delegation—a visual guide</title><link href="http://localhost:4000/domain-wide-delegation-a-visual-guide.html" rel="alternate" type="text/html" title="Domain-wide delegation—a visual guide" /><published>2018-04-22T00:00:00-04:00</published><updated>2018-04-22T00:00:00-04:00</updated><id>http://localhost:4000/domain-wide-delegation-a-visual-guide</id><content type="html" xml:base="http://localhost:4000/domain-wide-delegation-a-visual-guide.html">&lt;p&gt;An application may need to access information that belongs to an employee, or do something on their behalf. Things like, sending an email for them, or delete some of their calendar events. Usually, the user has a chance to review what the application will have access to — or &lt;strong&gt;scope&lt;/strong&gt; — and choose whether or not to allow it. You’ll know it as this screen:&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;/assets/posts/2018-04-22/authorization.png&quot; alt=&quot;Sign-in screen&quot; /&gt;
  &lt;figcaption&gt;Sign-in screen&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Sometimes a business case calls for a tool that should access employee data without the need for manual authorization by that employee. We use domain-wide delegation (DwD) of authority to achieve this.&lt;/p&gt;

&lt;p&gt;For a detailed step-by-step guide in enabling DwD see: &lt;a href=&quot;https://developers.google.com/admin-sdk/directory/v1/guides/delegation&quot;&gt;Perform G Suite Domain-Wide Delegation of Authority&lt;/a&gt;, but it essentially boils down to this:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;A service account is created with DwD enabled&lt;/li&gt;
  &lt;li&gt;A json keyfile – or credentials – is downloaded&lt;/li&gt;
  &lt;li&gt;These credentials are used within an application&lt;/li&gt;
  &lt;li&gt;The API (Admin SDK, Calendar, Drive, etc) used plus its scopes are determined at the application level&lt;/li&gt;
  &lt;li&gt;The client ID (generated when the service account was created in step 1) and scopes are applied to the G Suite domain via the Admin console&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Visually, how the pieces fit together looks something like this…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2018-04-22/overview.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ok, now let’s see how the process might play out when separate teams are responsible for different steps.&lt;/p&gt;

&lt;h2 id=&quot;separation-of-concerns&quot;&gt;Separation of concerns&lt;/h2&gt;

&lt;p&gt;At the enterprise level, there’ll be multiple teams or individuals responsible for different aspects of GCP and G Suite administration. Which means, there’s going to be some level of coordination when it comes to setting up DwD for an application that needs it.&lt;/p&gt;

&lt;p&gt;There are distinct actors responsible for providing and consuming each of these things. Let’s say:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;A developer from the App Dev team&lt;/li&gt;
  &lt;li&gt;The GCP admin from the Operations team&lt;/li&gt;
  &lt;li&gt;And the G Suite domain administrator from some other part of IT&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;small&gt; &lt;em&gt;GCP admin is a generalized term I’m using to refer to someone who has the permissions to create service accounts, whether it be a GCP Project Owner or a Service Account Admin.&lt;/em&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2018-04-22/actors.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And here’s an example what the division of responsibilities looks like…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2018-04-22/responsibility.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The Security team would be a factor in this dance as well, but let’s pretend everything has the security stamp of approval.&lt;/p&gt;

&lt;h2 id=&quot;the-developer&quot;&gt;The Developer&lt;/h2&gt;

&lt;p&gt;In our scenario, App Dev wants to build an application that accesses user data on the domain. They determine the APIs and list of API scopes to be used. What’s missing is the credentials needed for authentication between the application and G Suite domain.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2018-04-22/developer.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-gcp-admin&quot;&gt;The GCP admin&lt;/h2&gt;

&lt;p&gt;In order to get the credentials, App Dev asks the GCP admin for a service account with DwD enabled. The GCP admin enables the proper APIs, chooses (or creates) a service account, and makes the credentials available to the developers.&lt;/p&gt;

&lt;p&gt;&lt;small&gt;&lt;em&gt;Security’s Trust No One policy means it doesn’t like the idea of handing over credentials as plain text to anyone outside the Operations team. So, the GCP admin might use Cloud KMS to encrypt the credentials. I’ve left this out of the diagrams so it doesn’t over complicate them.&lt;/em&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2018-04-22/gcp_admin.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-g-suite-admin&quot;&gt;The G Suite admin&lt;/h2&gt;

&lt;p&gt;Finally, the application is registered with the G Suite domain so that the domain will know how to identify the application.&lt;/p&gt;

&lt;p&gt;To do this, the G Suite admin needs the client ID associated with the service account and API scopes. They’ll add these values to the &lt;a href=&quot;https://support.google.com/a/answer/162106?hl=en&quot;&gt;Manage client API access&lt;/a&gt; page of the G Suite console.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2018-04-22/gsuite_admin.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;where-to-go-from-here&quot;&gt;Where to go from here&lt;/h2&gt;

&lt;p&gt;Often, you’ll want to verify the DwD configuration is set up correctly. Test with this bare minimum &lt;a href=&quot;https://github.com/lewisrodgers/codelabs/tree/master/google-admin-sdk-api&quot;&gt;python script&lt;/a&gt; that can be adjusted for your own needs.&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developers.google.com/identity/protocols/OAuth2ServiceAccount&quot;&gt;Using OAuth 2.0 for Server to Server Applications&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developers.google.com/admin-sdk/directory/v1/guides/delegation&quot;&gt;Perform G Suite Domain-Wide Delegation of Authority&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developers.google.com/+/domains/authentication/delegation&quot;&gt;Perform Google Apps domain-wide delegation of authority&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://support.google.com/a/answer/162106?hl=en&quot;&gt;OAuth: Managing API client access&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>lewisrodgers</name></author><category term="G Suite" /><category term="GCP" /><summary type="html">An application may need to access information that belongs to an employee, or do something on their behalf. Things like, sending an email for them, or delete some of their calendar events. Usually, the user has a chance to review what the application will have access to — or scope — and choose whether or not to allow it. You’ll know it as this screen:</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/posts/2018-04-22/actors.png" /></entry></feed>